必要モジュールをインストール
sudo apt-get update
sudo apt-get install -y libpq-dev python3-dev

pip install -r requirements.txt
pip install -r services/auth-service/requirements.txt
pip install -r services/task-service/requirements.txt


dockerのネットワークを作成
docker network create task-management-network

コンテナを立ち上げる
docker-compose -f docker-compose.yml up -d
docker-compose -f services/auth-service/docker-compose.yml up -d
docker-compose -f services/task-service/docker-compose.yml up -d
docker-compose -f services/frontend/docker-compose.yml up -d


会社PCでうまく動かない件について
・家で接続したときはなぜかlocalhostでアクセスできた（ふつうはubuntuサーバのIPが必要なはず）
・会社からはlocalhost/login.htmlでアクセスできず、IP/login.htmlでアクセスできた
・システム間通信はlocalhostで問題ないはずだが、例えばブラウザからログインした後にlocalhost/index.htmlとかに行ってしまうと無理か
→まずはlocalhostで動いているのか確認
→次になぜlocalhostで動いているのか確認
→会社PCでもアクセスできるような設定にする

WSL2とWindowsのローカルホスト接続について説明します。
WSL2（Windows Subsystem for Linux）はWindows上で動作するLinux環境です。WindowsホストとWSL2間で通信ができるようにネットワーク接続が自動的に設定されています。
主な理由：
WSL2とWindowsはネットワークブリッジで接続されています
WSLでdockerコンテナをポート公開（8001など）すると、Windowsホスト側からもそのポートにアクセス可能になります
ホストPCのブラウザ（Windows側）からlocalhostでWSL内のサービスにアクセスできます
設定を確認すると：
フロントエンドサービス：0.0.0.0:80->80/tcp（Windowsのブラウザからlocalhostでアクセス可能）
認証サービス：0.0.0.0:8001->8000/tcp（Windowsからlocalhost:8001でアクセス可能）
構成としては：
WindowsのブラウザがHTMLやJSをフロントエンドコンテナから取得（localhost:80）
JSがAPIサーバー（localhost:8001）に通信
実際のサーバーはWSL内のDockerコンテナで動作